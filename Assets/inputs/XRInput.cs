//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/inputs/XRInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/inputs/XRInput.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @XRInput: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @XRInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""XRInput"",
    ""maps"": [
        {
            ""name"": ""GrabClimb"",
            ""id"": ""92d50a39-be35-441b-bbf4-e552efb06e80"",
            ""actions"": [
                {
                    ""name"": ""ClimbR"",
                    ""type"": ""Button"",
                    ""id"": ""fafa72d3-6b3b-4266-a4f6-ebad2ca9710a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ClimbL"",
                    ""type"": ""Button"",
                    ""id"": ""ca5615a8-b463-4859-b0dc-812712cec166"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5d1e863a-a71e-4f3d-9651-cfebf54973d2"",
                    ""path"": ""<XRController>{RightHand}/{GripButton}"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClimbR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce4306ba-2eae-4271-bf7d-94c7e9305ff6"",
                    ""path"": ""<XRController>{LeftHand}/{GripButton}"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClimbL"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GrabClimb
        m_GrabClimb = asset.FindActionMap("GrabClimb", throwIfNotFound: true);
        m_GrabClimb_ClimbR = m_GrabClimb.FindAction("ClimbR", throwIfNotFound: true);
        m_GrabClimb_ClimbL = m_GrabClimb.FindAction("ClimbL", throwIfNotFound: true);
    }

    ~@XRInput()
    {
        UnityEngine.Debug.Assert(!m_GrabClimb.enabled, "This will cause a leak and performance issues, XRInput.GrabClimb.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GrabClimb
    private readonly InputActionMap m_GrabClimb;
    private List<IGrabClimbActions> m_GrabClimbActionsCallbackInterfaces = new List<IGrabClimbActions>();
    private readonly InputAction m_GrabClimb_ClimbR;
    private readonly InputAction m_GrabClimb_ClimbL;
    /// <summary>
    /// Provides access to input actions defined in input action map "GrabClimb".
    /// </summary>
    public struct GrabClimbActions
    {
        private @XRInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public GrabClimbActions(@XRInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "GrabClimb/ClimbR".
        /// </summary>
        public InputAction @ClimbR => m_Wrapper.m_GrabClimb_ClimbR;
        /// <summary>
        /// Provides access to the underlying input action "GrabClimb/ClimbL".
        /// </summary>
        public InputAction @ClimbL => m_Wrapper.m_GrabClimb_ClimbL;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_GrabClimb; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="GrabClimbActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(GrabClimbActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="GrabClimbActions" />
        public void AddCallbacks(IGrabClimbActions instance)
        {
            if (instance == null || m_Wrapper.m_GrabClimbActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GrabClimbActionsCallbackInterfaces.Add(instance);
            @ClimbR.started += instance.OnClimbR;
            @ClimbR.performed += instance.OnClimbR;
            @ClimbR.canceled += instance.OnClimbR;
            @ClimbL.started += instance.OnClimbL;
            @ClimbL.performed += instance.OnClimbL;
            @ClimbL.canceled += instance.OnClimbL;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="GrabClimbActions" />
        private void UnregisterCallbacks(IGrabClimbActions instance)
        {
            @ClimbR.started -= instance.OnClimbR;
            @ClimbR.performed -= instance.OnClimbR;
            @ClimbR.canceled -= instance.OnClimbR;
            @ClimbL.started -= instance.OnClimbL;
            @ClimbL.performed -= instance.OnClimbL;
            @ClimbL.canceled -= instance.OnClimbL;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="GrabClimbActions.UnregisterCallbacks(IGrabClimbActions)" />.
        /// </summary>
        /// <seealso cref="GrabClimbActions.UnregisterCallbacks(IGrabClimbActions)" />
        public void RemoveCallbacks(IGrabClimbActions instance)
        {
            if (m_Wrapper.m_GrabClimbActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="GrabClimbActions.AddCallbacks(IGrabClimbActions)" />
        /// <seealso cref="GrabClimbActions.RemoveCallbacks(IGrabClimbActions)" />
        /// <seealso cref="GrabClimbActions.UnregisterCallbacks(IGrabClimbActions)" />
        public void SetCallbacks(IGrabClimbActions instance)
        {
            foreach (var item in m_Wrapper.m_GrabClimbActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GrabClimbActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="GrabClimbActions" /> instance referencing this action map.
    /// </summary>
    public GrabClimbActions @GrabClimb => new GrabClimbActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "GrabClimb" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="GrabClimbActions.AddCallbacks(IGrabClimbActions)" />
    /// <seealso cref="GrabClimbActions.RemoveCallbacks(IGrabClimbActions)" />
    public interface IGrabClimbActions
    {
        /// <summary>
        /// Method invoked when associated input action "ClimbR" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnClimbR(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ClimbL" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnClimbL(InputAction.CallbackContext context);
    }
}
